// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(VIEWER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auditLogs    AuditLog[]
  syncStatuses SyncStatus[]

  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN
  TEACHER
  VIEWER
}

model StudentResponse {
  id        String   @id @default(cuid())
  timestamp DateTime
  email     String
  module    String
  edition   String

  // Avaliação da Disciplina
  clarezaObjetivos            Int?
  articulacaoModulos          Int?
  utilizacaoPlataformas       Int?
  contributoAquisicao         Int?
  apreciacaoGlobalDisciplina  Int?

  // Avaliação Docente
  estruturacaoAulas          Int?
  exposicaoConteudos         Int?
  dominioConteudos           Int?
  cumprimentoHorario         Int?
  disponibilidadeApoio       Int?
  estimuloParticipacao       Int?
  apreciacaoGlobalDocente    Int?

  // Avaliação da Organização
  apoioEquipaExecutiva        Int?
  organizacaoCondicoesCurso   Int?
  instalacoesEquipamentos     Int?

  // Comentários
  comentarios        String?
  comentariosDeleted Boolean  @default(false)

  // Sync metadata
  gsheetsRowIndex Int?
  lastSyncedAt    DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([email, module, edition])
  @@index([module, edition])
  @@index([email])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  action     String
  tableName  String?
  recordId   String?
  oldValue   String?
  newValue   String?
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([userId])
}

model SyncStatus {
  id             String    @id @default(cuid())
  startedAt      DateTime
  completedAt    DateTime?
  status         SyncStatusEnum
  rowsProcessed  Int       @default(0)
  rowsAdded      Int       @default(0)
  rowsUpdated    Int       @default(0)
  errorMessage   String?
  triggeredById  String?
  triggeredBy    User?     @relation(fields: [triggeredById], references: [id])
  createdAt      DateTime  @default(now())

  @@index([startedAt])
  @@index([status])
}

enum SyncStatusEnum {
  RUNNING
  SUCCESS
  FAILED
}
